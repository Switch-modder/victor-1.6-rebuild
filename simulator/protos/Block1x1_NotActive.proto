#VRML_SIM V7.3.0 utf8

PROTO Block1x1_NotActive [
  field SFBool filterLogs FALSE
  field SFString name "Block000"
  field SFString type "1" # BlockType
  field SFVec3f translation 0 0 0.022
  field SFRotation rotation 0 0 1 0
  field SFFloat mass 0.085
  field SFColor blockColor 1 0 0
  field SFBool  useWhiteMarkerBackgrounds TRUE
  field SFString markerImg ""  # Image path relative to textures/
  field SFBool active FALSE  # Whether or not this block has active lights
  field SFInt32 activeID 1   # Must be unique in the world among all active blocks
  field SFFloat width 0.044    # Length of one edge in meters
  field SFFloat cornerWidth 0.00 # Length of a corner
  field SFFloat markerWidth 0.025
  
  field SFString markerImg_front ""
  field SFString markerImg_back  ""
  field SFString markerImg_left  ""
  field SFString markerImg_right ""
  field SFString markerImg_top   ""
  field SFString markerImg_bottom ""
]
{
Solid {

  %{
    # Set some dimensions
    hWidth = fields.width.value/2
    ledWidth = 0.007
    ledHWidth = ledWidth/2
    ledLength = 0.019
  }%

  name IS name
  model IS type
  translation IS translation
  rotation IS rotation
  contactMaterial "cmat_block"
  children [
        
        # Front Face
        VisionMarker {
            rotation 0 0 1 -1.5708
            translation %{=-hWidth}% 0 0
            %{ if fields.markerImg_front.value ~= "" then }%
              image IS markerImg_front
            %{ else }%
              image IS markerImg
            %{ end }%
            connectorName "connectorFront"
            connectorRotation 0 1 0 -1.57079
            markerWidth IS markerWidth
        }
        
        # Back Face
        VisionMarker {
            rotation 0 0 1 1.5708
            translation %{=hWidth}% 0 0
            %{ if fields.markerImg_back.value ~= "" then }%
              image IS markerImg_back
            %{ else }%
              image IS markerImg
            %{ end }%
            connectorName "connectorBack"
            connectorRotation 0 1 0 1.57079
            markerWidth IS markerWidth
        }
        
        # Bottom Face
    VisionMarker {
      # Rotate around X to get on top, followed by around Z to orient correctly
            rotation 0.57735027 -0.57735027 -0.57735027 2.09439510
      translation 0 0 %{=-hWidth}%
      %{ if fields.markerImg_bottom.value ~= "" then }%
        image IS markerImg_bottom
      %{ else }%
        image IS markerImg
      %{ end }%
      connectorName "connectorBottom"
      connectorRotation 0 1 0 3.14159
      markerWidth IS markerWidth
    }
        
        # Top Face
        VisionMarker {
            # Rotate around X to get on top, followed by around Z to orient correctly
            rotation -0.57735027 0.57735027 -0.57735027 2.09439510
            translation 0 0 %{=hWidth}%
            %{ if fields.markerImg_top.value ~= "" then }%
              image IS markerImg_top
            %{ else }%
              image IS markerImg
            %{ end }%
            connectorName "connectorTop"
            connectorRotation 0 1 0 0
            markerWidth IS markerWidth
        }
                        
        # Left Face
        VisionMarker {
            rotation 0 0 1 3.1415
            translation 0 %{=hWidth}% 0
            %{ if fields.markerImg_left.value ~= "" then }%
              image IS markerImg_left
            %{ else }%
              image IS markerImg
            %{ end }%
            connectorName "connectorLeft"
            connectorRotation 1 0 0 -1.57079
            markerWidth IS markerWidth
        }
        
        # Right Face
        VisionMarker {
            rotation 0 0 1 0
            translation 0 %{=-hWidth}% 0
            %{ if fields.markerImg_right.value ~= "" then }%
              image IS markerImg_right
            %{ else }%
              image IS markerImg
            %{ end }%
            connectorName "connectorRight"
            connectorRotation 1 0 0 1.57079
            markerWidth IS markerWidth
        }

    DEF Block1x1Shape Shape {
      appearance Appearance {
        material Material {
          diffuseColor IS blockColor
          ambientIntensity 1
        }
      }
      geometry Box {
        size %{=fields.width.value}% %{=fields.width.value}% %{=fields.width.value}%
      }
    }

    %{ 
      if fields.cornerWidth.value > 0 then
      
      # Index array of corner positions
      idx = {}
      idx[1] = { -1, -1,  1}
      idx[2] = { -1,  1,  1}
      idx[3] = {  1, -1,  1}
      idx[4] = {  1,  1,  1}
      idx[5] = { -1, -1, -1}
      idx[6] = { -1,  1, -1}
      idx[7] = {  1, -1, -1}
      idx[8] = {  1,  1, -1}

      for i=1,8 do
        # Position of corner center wrt block origin
        lx = idx[i][1] * (hWidth - fields.cornerWidth.value/2 + 0.0001)
        ly = idx[i][2] * (hWidth - fields.cornerWidth.value/2 + 0.0001)
        lz = idx[i][3] * (hWidth - fields.cornerWidth.value/2 + 0.0001)
    }%
    Transform {
      translation %{=lx}% %{=ly}% %{=lz}%
      children [
      Shape {
        appearance Appearance {
          material Material {
            diffuseColor 0 0 0
          }
        }
        geometry Box {
          size %{=fields.cornerWidth.value}% %{=fields.cornerWidth.value}% %{=fields.cornerWidth.value}%
        }
      }
      ]
    }
    %{ 
      end  # End corner for loop
    end  # End if cornerWidth > 0
    }%
  

  ] # Block Children

} # "Robot" (the actual block)

  
} # PROTO