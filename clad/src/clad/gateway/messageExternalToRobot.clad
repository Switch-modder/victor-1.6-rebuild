#include "clad/gateway/shared.clad"

namespace Anki {
namespace Vector {
namespace Gateway {

message UiDeviceConnectionWrongVersion {
  string placeHolder,
}

message MoveHead {
  float_32 speed_rad_per_sec,
}

message MoveLift {
  float_32 speed_rad_per_sec,
}

message DriveArc {
  float_32 speed,               // Target speed in mm/sec
                                // If curvatureRadius_mm == 0, the speed is in rad/s where +ve means CCW rotation.
  float_32 accel,               // Acceleration to approach target speed in mm/sec^2 (Sign is ignored)
                                // (or rad/s^2 if curvatureRadius_mm == 0)
                                // 0: Max acceleration
  int_16 curvatureRadius_mm     // Radius of arc to drive
                                // u16_MAX or u16_MIN: Straight
                                // +ve: curves left, -ve: curves right
                                // 0: Point turn
}

// Sends a chunk of oled data, to be later displayed using DisplayFaceImageRGB
message DisplayFaceImageRGBChunk {
    uint_16  faceData[600], // Splitting into chunks of 600 similar to the e2r layer
    uint_16  numPixels,
    uint_8   chunkIndex,
    uint_8   numChunks,
    uint_32  duration_ms,     // Use uint_32 max value to keep the image on the screen
    bool     interruptRunning,
}

// Request a status history
message RobotHistoryRequest {
}

// ====================================================
//                      Meet Victor
// ====================================================

// The app requests that the robot perform some non-instantaneous action, usually
// an action with an associated voice command, such as "go to your charger"
// todo (VIC-1398): eventually AppIntent should be its own union of structures, but
// currently there's only one intent, with one arg, and it's not possible to transmit
// a union over the temporary webservice handler. This will need replacing once the
// real app->engine channel is working
//
// Start Meet Victor
message AppIntent {
  string intent,
  string param,
}

// CancelFaceEnrollment - Unsets face enrollment settings, meaning BehaviorEnrollFace will no
//                        longer be activatable
//
// Cancels Meet Victor.
message CancelFaceEnrollment {
}

// Request a list of names and IDs
message RequestEnrolledNames {
}

// Rename given ID+oldName pair to use newName. For safety if current face with given ID
// does not match oldName, nothing happens.
// On success, a RobotLoadedKnownFace message with faceID and newName will be sent.
message UpdateEnrolledFaceByID {
  int_32 faceID,
  string oldName,
  string newName
}

// Erase a face record by ID
message EraseEnrolledFaceByID {
  int_32 faceID
}

// Erase all enrolled faces (use with care!)
message EraseAllEnrolledFaces {
}

// SetFaceToEnroll - Send face enrollments settings. Actual face enrollment only happens
//                   when the BehaviorEnrollFace runs. That behavior requires these settings
//                   be sent in order to be activatable.
//
// If you want to change where the enrolled face is saved (e.g., merge final enrollment into an
// existing face), use this before `AppIntent`.
//
// SetFaceToEnroll can be used to "rescan" a face, either from scratch, or to add new data to an existing face
message SetFaceToEnroll {
    string name,

    int_32 observedID=0,  // The ID of a specific observed face to enroll (0 for next one we see)
    int_32 saveID=0,      // The ID of an existing face to merge final enrollment into (0 for none,
                          // i.e. use observedID)

    bool saveToRobot=1,   // Save to robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)
    bool sayName=0,       // Play say-name/celebration animations on success before completing
    bool useMusic=0       // Starts special music during say-name animations (will leave music playing!)
}

enum uint_32 VisionMode {
    Faces = 0x01 // TODO: Stop exposing VisionModes directly in the SDK 
}

message EnableVisionMode {
   VisionMode mode,
   bool       enable
}

// Struct containing all the information relevant to how a 
// path should be modified or traversed.
// TODO: Include path wonkification parameters
structure PathMotionProfile {
    float_32     speed_mmps = 100.0,
    float_32     accel_mmps2 = 200.0,
    float_32     decel_mmps2 = 500.0,
    float_32     pointTurnSpeed_rad_per_sec = 2.0,
    float_32     pointTurnAccel_rad_per_sec2 = 10.0,
    float_32     pointTurnDecel_rad_per_sec2 = 10.0,
    float_32     dockSpeed_mmps = 60.0,
    float_32     dockAccel_mmps2 = 200.0,
    float_32     dockDecel_mmps2 = 500.0,
    float_32     reverseSpeed_mmps = 80.0,
    bool         isCustom = 0
}

// GotoPose
message GotoPose {
  float_32 x_mm,
  float_32 y_mm,
  float_32 rad,
  PathMotionProfile motionProf,
  uint_8 level,
}

// DriveStraight
//  Drives a straight line forward or backward without using the planner.
message DriveStraight {
   float_32 speed_mmps,  // Speed should be positive
   float_32 dist_mm,     // Use +ve for forward, -ve for backward
   bool shouldPlayAnimation = 1
}

// TurnInPlace
// If isAbsolute == 0, turns the specified number of radians, *relative to the robot's current heading*
// If isAbsolute != 0, turns to the specified absolute orientation.
message TurnInPlace {
    float_32 angle_rad, // relative mode: postive turns left negative turns right
    float_32 speed_rad_per_sec = 0.0,
    float_32 accel_rad_per_sec2 = 0.0,
    float_32 tol_rad = 0.0, // This should be no smaller than POINT_TURN_ANGLE_TOL from cozmoEngineConfig.h.
                            // Smaller values are ignored except 0 which is interpreted to mean
                            // default tolerance of POINT_TURN_ANGLE_TOL.
    uint_8 isAbsolute       // 0: angle_rad is relative to current orientation, 1: angle_rad is absolute angle to turn to
}

// SetHeadAngle
message SetHeadAngle {
    float_32 angle_rad,
    float_32 max_speed_rad_per_sec,
    float_32 accel_rad_per_sec2,
    float_32 duration_sec
}

// SetLiftHeight
message SetLiftHeight {
    float_32 height_mm,
    float_32 max_speed_rad_per_sec,
    float_32 accel_rad_per_sec2,
    float_32 duration_sec
}

enum uint_8 AlignmentType {
  LIFT_FINGER = 0, // Fingers aligned with object
  LIFT_PLATE,      // Lift plate aligned with object
  BODY,            // Front of body aligned with object
  CUSTOM
}

// AlignWithObject
// "Docks" to object so that it is aligned with it at the specified AligmentType or distance
// If alignmentType is CUSTOM, distanceFromMarker_mm is used, otherwise distanceFromMarker_mm is ignored
message AlignWithObject {
    int_32 objectID,
    PathMotionProfile motionProf,
    float_32 distanceFromMarker_mm,
    float_32 approachAngle_rad,
    bool useApproachAngle,
    bool usePreDockPose,
    AlignmentType alignmentType
}

// SetLiftAngle
message SetLiftAngle {
    float_32 angle_rad,
    float_32 max_speed_rad_per_sec,
    float_32 accel_rad_per_sec2,
    float_32 duration_sec
}

// DeleteCustomMarkerObjects
// Deletes all instantiations of any custom marker objects defined below.
// "Fixed" markerless custom objects remain.
// The definitions remain valid so new ones can still be created.
// "RobotDeletedCustomMarkerObjects" message will be sent back as confirmation.
message DeleteCustomMarkerObjects {
}

// DeleteFixedCustomObjects
// Deletes all "fixed" (markerless) custom objects created with CreateFixedCustomObject.
// Custom marker objects will remain.
// "RobotDeletedFixedCustomObjects" message will be sent back as confirmation.
message DeleteFixedCustomObjects {
}

// UndefineAllCustomMarkerObjects
// All custom marker objects definitions defined with messages below are completely removed
// and any instantiations of those objects are deleted.
// "Fixed" (markerless) custom objects remain.
// "RobotDeletedCustomMarkerObjects" message will be sent back as confirmation.
message UndefineAllCustomMarkerObjects {
}

// CreateFixedCustomObject
// Creates a CustomObject at the specific pose with no markers associated with it
// Since this object has no markers with which to be observed, it will remain in the
// specified pose as an obstacle forever (or until deleted with a deletion message above)
message CreateFixedCustomObject {
  PoseStruct3d pose,
  float_32 xSize_mm,
  float_32 ySize_mm,
  float_32 zSize_mm,
}

enum int_16 CustomObjectMarker
{
  Circles2,
  Circles3,
  Circles4,
  Circles5,

  Diamonds2,
  Diamonds3,
  Diamonds4,
  Diamonds5,

  Hexagons2,
  Hexagons3,
  Hexagons4,
  Hexagons5,

  Triangles2,
  Triangles3,
  Triangles4,
  Triangles5,

  // Should remain last:
  Count
} // enum class CustomObjectMarker

// DefineCustomBox
// Defines a custom object of the given size with the given markers centered on each side
// If isUnique=true, there is guaranteed to be no more than one object of this type present in the world
message DefineCustomBox {
  ObjectType         customType, // One of CustomTypeN, where N=0..19
  CustomObjectMarker markerFront,
  CustomObjectMarker markerBack,
  CustomObjectMarker markerTop,
  CustomObjectMarker markerBottom,
  CustomObjectMarker markerLeft,
  CustomObjectMarker markerRight,
  float_32   xSize_mm,
  float_32   ySize_mm,
  float_32   zSize_mm,
  float_32   markerWidth_mm,
  float_32   markerHeight_mm,
  bool       isUnique
}

// DefineCustomCube
// Defines a custom cube of the given size. The cube will have the same marker centered on all faces.
// If isUnique=true, there is guaranteed to be no more than one cube of this type present in the world at a time.
message DefineCustomCube {
  ObjectType         customType, // One of CustomTypeN, where N=0..19
  CustomObjectMarker marker,
  float_32   size_mm,
  float_32   markerWidth_mm,
  float_32   markerHeight_mm,
  bool       isUnique
}

// DefineCustomWall
// Defines a custom wall of the given height and width, with the same marker centered on both sides (front and back).
// The wall's thickness is assumed to be 1cm (and thus there are no markers on its left, right, top, or bottom)
// If isUnique=true, there is guaranteed to be no more than one wall of this type present in the world at a time.
message DefineCustomWall {
  ObjectType         customType, // One of CustomTypeN, where N=0..19
  CustomObjectMarker marker,
  float_32   width_mm,
  float_32   height_mm,
  float_32   markerWidth_mm,
  float_32   markerHeight_mm,
  bool       isUnique
}

message SetMemoryMapBroadcastFrequency_sec {
  float_32 frequency=-1.0  // If frequency is negative, don't send
}

// Note: these values and messages must match the values that get added to MessageGameToEngine
union MessageExternalToRobot {
  UiDeviceConnectionWrongVersion UiDeviceConnectionWrongVersion = 0x00, // DO NOT CHANGE THIS VALUE
  MoveHead                           MoveHead                           = 0x03,
  MoveLift                           MoveLift                           = 0x04,
  DriveArc                           DriveArc                           = 0x05,
  RobotHistoryRequest                RobotHistoryRequest                = 0x06,
  // Empty slot. Feel free to use
  DisplayFaceImageRGBChunk           DisplayFaceImageRGBChunk           = 0x08,
  AppIntent                          AppIntent                          = 0x09,
  CancelFaceEnrollment               CancelFaceEnrollment               = 0x0A,
  RequestEnrolledNames               RequestEnrolledNames               = 0x0B,
  UpdateEnrolledFaceByID             UpdateEnrolledFaceByID             = 0x0C,
  EraseEnrolledFaceByID              EraseEnrolledFaceByID              = 0x0D,
  EraseAllEnrolledFaces              EraseAllEnrolledFaces              = 0x0E,
  SetFaceToEnroll                    SetFaceToEnroll                    = 0x0F,
  EnableVisionMode                   EnableVisionMode                   = 0x10,
  GotoPose                           GotoPose                           = 0x12,
  DriveStraight                      DriveStraight                      = 0x13,
  TurnInPlace                        TurnInPlace                        = 0x14,
  SetHeadAngle                       SetHeadAngle                       = 0x15,
  SetLiftHeight                      SetLiftHeight                      = 0x16,
  AlignWithObject                    AlignWithObject                    = 0x18,
  SetLiftAngle                       SetLiftAngle                       = 0x19,
  DeleteCustomMarkerObjects          DeleteCustomMarkerObjects          = 0x1A,
  DeleteFixedCustomObjects           DeleteFixedCustomObjects           = 0x1B,
  UndefineAllCustomMarkerObjects     UndefineAllCustomMarkerObjects     = 0x1C,
  CreateFixedCustomObject            CreateFixedCustomObject            = 0x1D,
  DefineCustomBox                    DefineCustomBox                    = 0x1E,
  DefineCustomCube                   DefineCustomCube                   = 0x1F,
  DefineCustomWall                   DefineCustomWall                   = 0x20,
  SetMemoryMapBroadcastFrequency_sec SetMemoryMapBroadcastFrequency_sec = 0x21,
}

} // Gateway
} // Victor
} // Anki
