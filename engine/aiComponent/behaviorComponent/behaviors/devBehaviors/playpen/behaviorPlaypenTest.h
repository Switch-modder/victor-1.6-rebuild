/**
 * File: behaviorPlaypenTest.h
 *
 * Author: Al Chaussee
 * Created: 07/25/17
 *
 * Description: Runs individual steps (behaviors) of playpen and manages switching between them and dealing
 *              with failures
 *
 * Copyright: Anki, Inc. 2017
 *
 **/

#ifndef __Cozmo_Basestation_BehaviorSystem_DevBehaviors_Playpen_BehaviorPlaypenTest_H__
#define __Cozmo_Basestation_BehaviorSystem_DevBehaviors_Playpen_BehaviorPlaypenTest_H__

#include "engine/aiComponent/behaviorComponent/behaviors/iCozmoBehavior.h"

#include "engine/factory/factoryTestLogger.h"
#include "util/signals/simpleSignal_fwd.h"

namespace Anki {
namespace Vector {

class IBehaviorPlaypen;
class Robot;

class BehaviorPlaypenTest : public ICozmoBehavior
{
public:
  
  BehaviorPlaypenTest(const Json::Value& config);
  virtual ~BehaviorPlaypenTest() {};
  
  virtual void BehaviorUpdate() override;
  
  static FactoryTestLogger& GetFactoryTestLogger();

  template<typename T>
  void HandleMessage(const T& msg);
  
protected:
  virtual void GetBehaviorOperationModifiers(BehaviorOperationModifiers& modifiers) const override {
    modifiers.wantsToBeActivatedWhenOnCharger = true;
    modifiers.behaviorAlwaysDelegates = false;
    modifiers.visionModesForActiveScope->insert({VisionMode::Markers, EVisionUpdateFrequency::High});
  }
  virtual void GetBehaviorJsonKeys(std::set<const char*>& expectedKeys) const override {}

  virtual void InitBehavior() override;

  // Override of IBehavior functions
  virtual bool WantsToBeActivatedBehavior() const override{ return true;}

  virtual void OnBehaviorActivated() override;
  virtual void OnBehaviorDeactivated() override;
  
  virtual void GetAllDelegates(std::set<IBehavior*>& delegates) const override;

  virtual void AlwaysHandleInScope(const RobotToEngineEvent& event) override;
  
private:
  
  // Handle the playpen result and finish up the test
  void HandleResult(FactoryTestResultCode result);

  // Display appropriate stuff on the face and backpack lights depending on the result
  void DisplayResult(FactoryTestResultCode result);

  // Reset all playpen behaviors and state
  void Reset();
  
  using PlaypenBehavior = std::shared_ptr<IBehaviorPlaypen>;
  
  PlaypenBehavior _currentBehavior = nullptr;
  
  std::vector<PlaypenBehavior>::iterator _currentPlaypenBehaviorIter;
  std::vector<PlaypenBehavior> _playpenBehaviors;
  
  std::vector<u32> _behaviorStartTimes;
  
  IMUTempDuration _imuTemp;

  std::vector<::Signal::SmartHandle> _signalHandles;  
};

} // namespace Vector
} // namespace Anki

#endif // __Cozmo_Basestation_BehaviorSystem_DevBehaviors_Playpen_BehaviorPlaypenTest_H__
