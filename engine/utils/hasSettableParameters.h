/**
 * File: hasSettableParameters.h
 *
 * Authors: Andrew Stein
 * Created: 2015-10-06
 *
 * Description:
 *
 *   Derive a class from this base class to provide the derived class with the ability
 *   to store parameters, set them from a given CLAD-generated message type, and 
 *   read them from Json.
 *
 *   There are three template parameters needed when deriving a class from this:
 *
 *   - Param_t: this should be a CLAD-generated enumeration of parameter names
 *      - NOTE: The enum must contain a final NumParameters entry!
 *
 *   - Value_t: the storage type for all parameters (Default is float)
 *
 *   - SetMsgTag: this should be the tag of a CLAD-generated GameToEngine message 
 *     which must have at least these three members:
 *      - paramNames:  an N-length vector of Param_t entries
 *      - paramValues: an N-length vector of corresponding Value_t entries
 *      - setUnspecifiedToDefault: if true, will call SetDefaultParams() before setting specified parameters
 *
 *   The derived class will automatically be set up to handle events generated by
 *   by receiving a GameToEngine message with tag SetMsgTag and will set any parameters
 *   specified in that message (and leave others unaffected).
 *
 * Copyright: Anki, Inc. 2015
 *
 **/


#ifndef __Anki_Cozmo_Util_HasSettableParameters_H__
#define __Anki_Cozmo_Util_HasSettableParameters_H__

#include "util/signals/simpleSignal_fwd.h"
#include "clad/externalInterface/messageGameToEngineTag.h"

namespace Anki {
namespace Vector {
  
  // Forward declarations
  class IExternalInterface;
  namespace ExternalInterface {
    class MessageGameToEngine;
  }
  template<typename T>class AnkiEvent;
  
  
  template<typename Param_t, ExternalInterface::MessageGameToEngineTag SetMsgTag, typename Value_t = float_t>
  class HasSettableParameters
  {
  public:
    // Each derived class should implement this to set its own parameter defaults.
    // Any parameters not set by SetDefaultParams() will be defaulted to zero.
    // It is public to make it easy to return a derived class to default settings.
    // Note that this method can also be used to set up allowable ranges for any or
    // all parameters using Set/GetParamRange below.
    virtual void SetDefaultParams() = 0;

    // Accessors: (Note that parameters are stored internally as ValueType)
    // Getter returns as type T via static_cast.
    // Setter clips values to specified range if there is one (see below).
    template<typename Return_t = Value_t> Return_t GetParam(Param_t whichParam);
    void SetParam(Param_t whichparam, Value_t newValue);

    // Get a snapshot of all parameters
    using ParamContainer = std::map<Param_t,Value_t>;
    const ParamContainer& GetAllParams();
    
    // Set all parameters at once, e.g. from a snapshot taken using GetAllParams()
    void SetAllParams(const ParamContainer& allParams);
    
    // Accessors for valid ranges:
    // Note that derived classes can set these up in SetDefaultParams() as well.
    // If not provided for a particular Param_t, that parameter is assumed to take any
    // valid value in the entire range for type Value_t.
    using Range = std::pair<Value_t, Value_t>; // .first is min, .second is max
    const Range& GetParamRange(Param_t whichParam);
    void SetParamRange(Param_t whichParam, Range range);
    
    // Set parameters from Json. Returns RESULT_OK so long as all members of the
    // the Json match a known parameter, RESULT_FAIL if an unknown name is encountered.
    // Note that not all parameters must be specified: unspecified ones will be left
    // at their existing values.
    Result SetParamsFromJson(const Json::Value& json);

  protected:
    // This class is not directly instantiable, and instead should be inherited from.
    // The derived class must provide an external interface at construction to
    // register event handling.
    HasSettableParameters(IExternalInterface* externalInterface);

  private:
    
    // NOTE: we set defaults on first use (i.e. first call to Get/SetParam().
    // We do it this way vs. in the constructor because SetDefaultParams is
    // virtual and thus should not be called from the base class constructor.
    bool _isInitialized = false;
    
    Signal::SmartHandle _eventHandler;
    void HandleSetParameters(const AnkiEvent<ExternalInterface::MessageGameToEngine>&event);
    
    // Storage for the actual params
    ParamContainer _params;
    
    // Storage for ranges
    std::map<Param_t, Range> _ranges;
    
  }; // class HasSettableParameters

} // namespace Vector
} // namespace Anki

#endif // __Anki_Cozmo_Util_HasSettableParameters_H__
