/** Clad message definitions for the messages sent from the WiFi to the engine.
 * ROBOT_CLAD_SHARED
 */


namespace Anki {
namespace Vector {

enum uint_8 CliffSensor {
  CLIFF_FL = 0, // Front left
  CLIFF_FR,     // Front right
  CLIFF_BL,     // Back left
  CLIFF_BR,     // Back right
  CLIFF_COUNT
}

enum uint_8 StopReason {
  CLIFF,   // Cliff encountered
  WHITE,   // White (> MIN_CLIFF_STOP_ON_WHITE_VAL) encountered
}

// If detected, (x_mm, y_mm) represent the location the cliff was detected
message CliffEvent {
  uint_32  timestamp,
  uint_8   detectedFlags,  // bit flags shifted by CliffSensor values above
  bool     didStopForCliff
}

// Is only sent when the robot is told not to stop on cliff detected in order
// to be able to react with animations at possible cliffs (driving over wires or carpet)
message PotentialCliff {
}

message SetCliffDetectThresholds
{
  uint_16 thresholds[4],  // New cliff threshold values for each sensor
}

message SetWhiteDetectThresholds
{
  uint_16 whiteThresholds[4]
}

// NOTE: If any new entries are added here, be sure to update the size of
//       invalidProxSensorStatusCounts_ in hal.cpp
enum uint_8 RangeStatus {
  RANGE_VALID    = 0,  // Ranging measurement is valid
  SIGMA_FAIL     = 1,  // Ambient light is adding too much noise to the ranging measurement
  SIGNAL_FAIL    = 2,  // Return signal is too low to give enough confidence on the range measured
  MIN_RANGE_FAIL = 3,  // Not enabled as default
  PHASE_FAIL     = 4,  // Wraparound conditions detected, or noise on signal is too high
  HARDWARE_FAIL  = 5,  // VCSEL failure, or VHV fail is detected
  NO_UPDATE      = 255 // No update, this error should NOT trigger
}

structure ProxSensorDataRaw {
  float_32    signalIntensity,  // the intensity of the light (expressed in millions of counts per second) return to the sensor
  float_32    ambientIntensity, // the intensity of light (expressed in millions of counts per second) in ambient conditions (i.e. emitter turned off)
  float_32    spadCount,        // effective number of SPADs (Single-photon Avalanche Diodes) used for the measurement
  uint_32     timestamp_ms,     // time this reading was recorded (for low power modes)
  uint_16     distance_mm,      // reported distance in mm (includes corrective offset)
  RangeStatus rangeStatus,      // the ranging status reported by the device (see documentation for values)
  uint_8      padding,
}

} // namespace Vector
} // namespace Anki

